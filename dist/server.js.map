{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "",
  "sources": [
    "../server.ts"
  ],
  "names": [],
  "mappings": "AAAA,YAAY,CAAC;;AAEb,0CAA0C;AAC1C,8CAA8C;AAC9C,mCAAmC;AACnC,iCAAiC;AACjC,6BAA6B;AAK7B,aAAa;AACb,0CAA2C;AAC3C,wCAAyC;AACzC,wCAAyC;AACzC,8CAA+C;AAG/C;IAGS,MAAM,CAAC,SAAS;QACrB,OAAO,IAAI,MAAM,CAAC;IACpB,CAAC;IAED;QACE,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QAErB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,WAAW;QACjB,wEAAwE;QACxE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;QACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEO,WAAW;QACjB,yCAAyC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;YAC7C,MAAM,GAAG,GAAQ,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;YACxC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YAEjB,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC;QAEH,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;YACvD,MAAM,UAAU,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC;YAErC,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YAEnE,wBAAwB;YACxB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACvB,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,MAAM;QACZ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAW,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAU,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAU,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,uBAAa,CAAC,CAAC;IAC1C,CAAC;CACF;AApDD,wBAoDC",
  "sourcesContent": [
    "\"use strict\";\r\n\r\nimport * as bodyParser from \"body-parser\";\r\nimport * as cookieParser from \"cookie-parser\";\r\nimport * as express from \"express\";\r\nimport * as logger from \"morgan\";\r\nimport * as path from \"path\";\r\nimport * as favicon from \"serve-favicon\";\r\n\r\nimport knex = require(\"./config/db\");\r\n\r\n// Api Routes\r\nimport {indexRoutes} from \"./routes/index\";\r\nimport {userRoutes} from \"./routes/user\";\r\nimport {taskRoutes} from \"./routes/task\";\r\nimport {projectRoutes} from \"./routes/project\";\r\n\r\n\r\nexport class Server {\r\n  public app: express.Application;\r\n  \r\n  public static bootstrap(): Server {\r\n    return new Server;\r\n  }\r\n  \r\n  constructor() {\r\n    this.app = express();\r\n    \r\n    this.middlewares();\r\n    this.routes();\r\n    this.catchErrors();\r\n  }\r\n  \r\n  private middlewares(): void {\r\n    // this.app.use(favicon(path.join(__dirname, \"public\", \"favicon.ico\")));\r\n    this.app.use(logger(\"dev\"));\r\n    this.app.use(bodyParser.json());\r\n    this.app.use(bodyParser.urlencoded({extended: false}));\r\n    this.app.use(cookieParser());\r\n    this.app.use(express.static(path.join(__dirname, \"public\")));\r\n  }\r\n  \r\n  private catchErrors(): void {\r\n    // catch 404 and forward to error handler\r\n    this.app.use((req: any, res: any, next: any) => {\r\n      const err: any = new Error(\"Not Found\");\r\n      err.status = 404;\r\n      \r\n      next(err);\r\n    });\r\n    \r\n    // error handler\r\n    this.app.use((err: any, req: any, res: any, next: any) => {\r\n      const statusCode = err.status || 500;\r\n      \r\n      res.locals.message = err.message;\r\n      res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\r\n      \r\n      // render the error page\r\n      res.status(statusCode);\r\n      res.send(\"Server Error\", statusCode);\r\n    });\r\n  }\r\n  \r\n  private routes(): void {\r\n    this.app.use(\"/\", indexRoutes);\r\n    this.app.use(\"/user\", userRoutes);\r\n    this.app.use(\"/task\", taskRoutes);\r\n    this.app.use(\"/project\", projectRoutes);\r\n  }\r\n}"
  ]
}