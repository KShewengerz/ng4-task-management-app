{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "",
  "sources": [
    "../server.ts"
  ],
  "names": [],
  "mappings": "AAAA,YAAY,CAAC;;AAEb,0CAA0C;AAC1C,8CAA8C;AAC9C,mCAAmC;AACnC,iCAAiC;AACjC,6BAA6B;AAG7B,aAAa;AACb,0CAA2C;AAC3C,wCAAyC;AACzC,wCAAyC;AACzC,8CAA+C;AAG/C;IAGW,MAAM,CAAC,SAAS;QACnB,OAAO,IAAI,MAAM,CAAC;IACtB,CAAC;IAED;QACI,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QAErB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAEO,WAAW;QACf,wEAAwE;QACxE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;QACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IAEO,WAAW;QACf,yCAAyC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;YAC3C,MAAM,GAAG,GAAQ,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;YACxC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YAEjB,IAAI,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;YACrD,MAAM,UAAU,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC;YAErC,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YAEnE,wBAAwB;YACxB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACvB,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,MAAM;QACV,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAW,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAU,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAU,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,uBAAa,CAAC,CAAC;IAC5C,CAAC;CACJ;AApDD,wBAoDC",
  "sourcesContent": [
    "\"use strict\";\n\nimport * as bodyParser from \"body-parser\";\nimport * as cookieParser from \"cookie-parser\";\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport * as path from \"path\";\nimport * as favicon from \"serve-favicon\";\n\n// Api Routes\nimport {indexRoutes} from \"./routes/index\";\nimport {userRoutes} from \"./routes/user\";\nimport {taskRoutes} from \"./routes/task\";\nimport {projectRoutes} from \"./routes/project\";\n\n\nexport class Server {\n    public app: express.Application;\n\n    public static bootstrap(): Server {\n        return new Server;\n    }\n\n    constructor() {\n        this.app = express();\n\n        this.middlewares();\n        this.routes();\n        this.catchErrors();\n    }\n\n    private middlewares(): void {\n        // this.app.use(favicon(path.join(__dirname, \"public\", \"favicon.ico\")));\n        this.app.use(logger(\"dev\"));\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({extended: false}));\n        this.app.use(cookieParser());\n        this.app.use(express.static(path.join(__dirname, \"public\")));\n    }\n\n    private catchErrors(): void {\n        // catch 404 and forward to error handler\n        this.app.use((req: any, res: any, next: any) => {\n            const err: any = new Error(\"Not Found\");\n            err.status = 404;\n\n            next(err);\n        });\n\n        // error handler\n        this.app.use((err: any, req: any, res: any, next: any) => {\n            const statusCode = err.status || 500;\n\n            res.locals.message = err.message;\n            res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\n\n            // render the error page\n            res.status(statusCode);\n            res.send(\"Server Error\", statusCode);\n        });\n    }\n\n    private routes(): void {\n        this.app.use(\"/\", indexRoutes);\n        this.app.use(\"/user\", userRoutes);\n        this.app.use(\"/task\", taskRoutes);\n        this.app.use(\"/project\", projectRoutes);\n    }\n}"
  ]
}