{"version":3,"file":"user.js","sourceRoot":"","sources":["../../api/user.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAIb,6CAA6C;AAE7C,mEAAiF;AAEjF,iDAA8C;AAC9C,qEAAiE;AAEjE,MAAM,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC;AAGhC,iBAA8B,GAAY,EAAE,GAAa,EAAE,IAAkB;;QAC3E,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,gBAAS,CAAC,CAAC,KAAK,CAAC,EAAC,EAAE,EAAC,CAAC,CAAC;QAElD,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtB,CAAC;CAAA;AALD,0BAKC;AAED,iBAA8B,GAAY,EAAE,GAAa,EAAE,IAAkB;;QAC3E,MAAM,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;YAC1B,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,gBAAS,CAAC;iBACrC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;iBAChB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACrB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YAEnB,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACtB;IACH,CAAC;CAAA;AAXD,0BAWC;AAED,oBAAiC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QAC9E,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QAEzB,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,gBAAS,CAAC;aACrC,KAAK,CAAC,EAAC,EAAE,EAAC,CAAC;aACX,GAAG,EAAE;aACL,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAEnB,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvB,CAAC;CAAA;AATD,gCASC;AAED,oBAAiC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QAC9E,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QAEtB,oFAAoF;QAEpF,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,gBAAS,CAAC;aACrC,KAAK,CAAC,EAAC,EAAE,EAAC,CAAC;aACX,MAAM,CAAC,IAAI,CAAC;aACZ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAEnB,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvB,CAAC;CAAA;AAZD,gCAYC;AAED,wBAA8B,IAAU,EAAE,GAAc;;QACtD,MAAM,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;QACxC,MAAM,EAAC,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAC,GAAG,IAAI,CAAC;QAE1C,MAAM,UAAU,GAAG,EAAE,CAAC,gBAAS,CAAC;aAC/B,KAAK,CAAC,EAAC,EAAE,EAAE,iBAAU,CAAC,EAAE,EAAC,CAAC;aAC1B,KAAK,CAAC,EAAC,EAAE,EAAC,CAAC,CAAC;QAEb,MAAM,gBAAgB,GAAG,EAAE,CAAC,gBAAS,CAAC;aACrC,KAAK,CAAC,EAAC,QAAQ,EAAE,iBAAU,CAAC,QAAQ,EAAC,CAAC;aACtC,KAAK,CAAC,EAAC,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAC,CAAC,CAAC;QAE1C,MAAM,oBAAoB,GAAG,EAAE,CAAC,gBAAS,CAAC;aACzC,KAAK,CAAC,EAAC,aAAa,EAAE,iBAAU,CAAC,YAAY,EAAC,CAAC;aAC/C,KAAK,CAAC,EAAC,CAAC,iBAAU,CAAC,YAAY,CAAC,EAAE,YAAY,EAAC,CAAC,CAAC;QAElD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC/B,UAAU;YACV,gBAAgB;YAChB,oBAAoB;SACrB,CAAC,CAAC,IAAI,CAAC,CAAM,IAAI,EAAC,EAAE;YACnB,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACnE,MAAM,aAAa,GAAG,MAAM,YAAY,CAAC,gBAAgB,CAAC,aAAK,CAAC,SAAS,CAAC,CAAC;YAE3E,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC;gBAAE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,aAAa,EAAC,CAAC,CAAC;QACtE,CAAC,CAAA,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;CAAA","sourcesContent":["\"use strict\";\r\n\r\nimport { Router, Request, Response, NextFunction } from \"express\";\r\n\r\nimport * as dbConnection from \"../config/db\";\r\n\r\nimport { userTable, userFields } from \"../shared/constants/db-table-fields/user\";\r\nimport { User } from \"../shared/interfaces/user\";\r\nimport { Error } from \"../shared/enums/error\";\r\nimport { ErrorHandler } from \"../shared/constants/error-message\";\r\n\r\nconst db = dbConnection.default;\r\n\r\n\r\nexport async function getUser(req: Request, res: Response, next: NextFunction) {\r\n  const id = req.params.id;\r\n  const fetchUser = await db(userTable).where({id});\r\n  \r\n  res.json(fetchUser);\r\n}\r\n\r\nexport async function addUser(req: Request, res: Response, next: NextFunction) {\r\n  await userValidation(req.body);\r\n  \r\n  if (res.statusCode !== 404) {\r\n    const insertUser = await db(userTable)\r\n    .insert(req.body)\r\n    .then(rows => rows[0])\r\n    .catch(err => err);\r\n    \r\n    res.json(insertUser);\r\n  }\r\n}\r\n\r\nexport async function deleteUser(req: Request, res: Response, next: NextFunction) {\r\n  const id = req.params.id;\r\n  \r\n  const deleteUser = await db(userTable)\r\n  .where({id})\r\n  .del()\r\n  .catch(err => err);\r\n  \r\n  res.json(deleteUser);\r\n}\r\n\r\nexport async function updateUser(req: Request, res: Response, next: NextFunction) {\r\n  const id = req.params.id;\r\n  const body = req.body;\r\n  \r\n  //TODO: Block update if id, username and emailAddress already exist with other users\r\n  \r\n  const updateUser = await db(userTable)\r\n  .where({id})\r\n  .update(body)\r\n  .catch(err => err);\r\n  \r\n  res.json(updateUser);\r\n}\r\n\r\nasync function userValidation(data: User, res?: Response) {\r\n  const errorHandler = new ErrorHandler();\r\n  const {id, emailAddress, username} = data;\r\n  \r\n  const isIdExists = db(userTable)\r\n  .count({id: userFields.Id})\r\n  .where({id});\r\n  \r\n  const isUsernameExists = db(userTable)\r\n  .count({username: userFields.Username})\r\n  .where({[userFields.Username]: username});\r\n  \r\n  const isEmailAddressExists = db(userTable)\r\n  .count({email_address: userFields.EmailAddress})\r\n  .where({[userFields.EmailAddress]: emailAddress});\r\n  \r\n  const result = await Promise.all([\r\n    isIdExists,\r\n    isUsernameExists,\r\n    isEmailAddressExists\r\n  ]).then(async data => {\r\n    const filterFields = await errorHandler.filterExistingFields(data);\r\n    const errorMessages = await errorHandler.getErrorMessages(Error.Duplicate);\r\n    \r\n    if (errorMessages.length > 0) res.status(404).send({errorMessages});\r\n  })\r\n  .catch(err => err);\r\n}"]}