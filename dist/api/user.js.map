{
  "version": 3,
  "file": "user.js",
  "sourceRoot": "",
  "sources": [
    "../../api/user.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\"use strict\";\r\n\r\nimport { Router, Request, Response, NextFunction } from \"express\";\r\n\r\nimport * as dbConnection from \"../config/db\";\r\n\r\nimport { userTable, userFields } from \"../shared/constants/db-table-fields/user\";\r\nimport { User } from \"../shared/interfaces/user\";\r\nimport { Error } from \"../shared/enums/error\";\r\nimport { ErrorHandler } from \"./error-handler\";\r\nimport { HttpVerb } from \"../shared/enums/http-verb\";\r\n\r\nimport * as snakeCase from \"snakecase-keys\";\r\n\r\nconst db = dbConnection.default;\r\n\r\n\r\nexport async function getUser(req: Request, res: Response, next: NextFunction): Promise<void> {\r\n  const id = req.params.id;\r\n  const fetchUser = await db(userTable).where({id});\r\n  \r\n  res.json(fetchUser);\r\n}\r\n\r\nexport async function addUser(req: Request, res: Response, next: NextFunction): Promise<void> {\r\n  const body = snakeCase(req.body);\r\n  \r\n  await userValidation(body, HttpVerb.POST, res);\r\n  \r\n  if (res.statusCode !== 409) {\r\n    const insertUser = await db(userTable)\r\n    .insert(body)\r\n    .then(rows => rows[0])\r\n    .catch(err => err);\r\n\r\n    res.status(201);\r\n  }\r\n}\r\n\r\nexport async function deleteUser(req: Request, res: Response, next: NextFunction): Promise<void> {\r\n  const id = req.params.id;\r\n  \r\n  const deleteUser = await db(userTable)\r\n  .where({id})\r\n  .del()\r\n  .catch(err => err);\r\n  \r\n  res.status(204);\r\n}\r\n\r\nexport async function updateUser(req: Request, res: Response, next: NextFunction): Promise<void> {\r\n  const id = req.params.id;\r\n  const body = snakeCase(req.body);\r\n  body.id = id;\r\n  \r\n  await userValidation(body, HttpVerb.PUT, res, id);\r\n\r\n  if (res.statusCode !== 409) {\r\n    const updateUser = await db(userTable)\r\n    .where({id})\r\n    .update(body)\r\n    .catch(err => err);\r\n\r\n    res.json(updateUser);\r\n  }\r\n}\r\n\r\nasync function userValidation(data: User, httpVerb: string, res: Response, userId?: string): Promise<void> {\r\n  const errorHandler = new ErrorHandler();\r\n  const httpAction = fetchValidationByHttpAction(data, httpVerb);\r\n  \r\n  await Promise.all(httpAction).then(async data => {\r\n    const filterFields = await errorHandler.filterExistingFields(data);\r\n    const errorMessages = await errorHandler.getErrorMessages(Error.Duplicate);\r\n\r\n    if (errorMessages.length > 0) res.status(409).send({errorMessages});\r\n  })\r\n  .catch(err => err);\r\n}\r\n\r\nfunction fetchValidationByHttpAction(data: User, httpAction: string): any[] {\r\n  if (httpAction === HttpVerb.POST) return fetchPostValidation(data);\r\n  else fetchPutValidation(data);\r\n}\r\n\r\nfunction fetchPostValidation(data: User) {\r\n  const {id, username, email_address} = snakeCase(data);\r\n  \r\n  const isIdExists = db(userTable)\r\n  .where({id})\r\n  .count({id: userFields.Id});\r\n  \r\n  const isUsernameExists = db(userTable)\r\n  .where({username})\r\n  .count({username: userFields.Username});\r\n  \r\n  const isEmailAddressExists = db(userTable)\r\n  .where({email_address})\r\n  .count({email_address: userFields.EmailAddress});\r\n  \r\n  const validations = [\r\n    isIdExists,\r\n    isUsernameExists,\r\n    isEmailAddressExists\r\n  ];\r\n  \r\n  return validations;\r\n}\r\n\r\nfunction fetchPutValidation(data: User): any[] {\r\n  const {id, username, email_address} = snakeCase(data);\r\n  \r\n  const isUsernameExists = db(userTable)\r\n  .where({username})\r\n  .andWhereNot({id, username})\r\n  .count({username: userFields.Username});\r\n  \r\n  const isEmailAddressExists = db(userTable)\r\n  .where({email_address})\r\n  .andWhereNot({id, email_address})\r\n  .count({email_address: userFields.EmailAddress});\r\n  \r\n  const validations = [\r\n    isUsernameExists,\r\n    isEmailAddressExists\r\n  ];\r\n  \r\n  return validations;\r\n}"
  ]
}